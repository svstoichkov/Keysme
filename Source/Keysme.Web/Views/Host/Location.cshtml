@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Create host";
}
@model Keysme.Web.ViewModels.Host.LocationViewModel

<div class="row">
    @Html.Partial("SideBarPartial")
    <div class="col-md-9">
        @using (Html.BeginForm("CreateLocation", "Host", FormMethod.Post, new { @class = "sky-form" }))
        {
            @Html.AntiForgeryToken()

            @Html.HiddenFor(m => m.Latitude)
            @Html.HiddenFor(m => m.Longitude)

            <header>Location</header>
            <fieldset>
                <section>
                    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
                    <div id="map" style="height: 500px; width: 100%;"></div>
                </section>
            </fieldset>

            <fieldset>
                <div class="row">
                    <section class="col-md-4">
                        @Html.LabelFor(m => m.Country)
                        @Html.TextBoxFor(m => m.Country, new { id = "country", @class = "form-control" })
                    </section>
                    <section class="col-md-4">
                        @Html.LabelFor(m => m.City)
                        @Html.TextBoxFor(m => m.City, new { id = "city", @class = "form-control" })
                    </section>
                    <section class="col-md-4">
                        @Html.LabelFor(m => m.State)
                        @Html.TextBoxFor(m => m.State, new { id = "state", @class = "form-control" })
                    </section>
                </div>
            </fieldset>

            <fieldset>
                <div class="row">
                    <section class="col-md-6">
                        @Html.LabelFor(m => m.Address)
                        @Html.TextBoxFor(m => m.Address, new { id = "address", @class = "form-control" })
                    </section>
                    <section class="col-md-6">
                        @Html.LabelFor(m => m.Apartment)
                        @Html.TextBoxFor(m => m.Apartment, new { @class = "form-control" })
                    </section>
                </div>
            </fieldset>

            <fieldset>
                <section>
                    @Html.LabelFor(m => m.PostalCode)
                    @Html.TextBoxFor(m => m.PostalCode, new { id = "postal-code", @class = "form-control" })
                </section>
            </fieldset>

            <footer>
                <button type="submit" class="btn-u">Continue</button>
            </footer>
        }
        <script>
            function initAutocomplete() {
                var map = new google.maps.Map(document.getElementById('map'), {
                    center: { lat: -33.8688, lng: 151.2195 },
                    zoom: 8,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                });

                // Create the search box and link it to the UI element.
                var input = document.getElementById('pac-input');
                var searchBox = new google.maps.places.SearchBox(input);
                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

                // Bias the SearchBox results towards current map's viewport.
                map.addListener('bounds_changed', function () {
                    searchBox.setBounds(map.getBounds());
                });

                var markers = [];
                // Listen for the event fired when the user selects a prediction and retrieve
                // more details for that place.
                searchBox.addListener('places_changed', function () {
                    var places = searchBox.getPlaces();
                    document.getElementById('address').value = places[0].formatted_address;
                    document.getElementById('Latitude').value = places[0].geometry.location.lat();
                    document.getElementById('Longitude').value = places[0].geometry.location.lng();

                    for (var component of places[0].address_components) {
                        for (var type of component.types) {
                            if (type == 'locality') {
                                document.getElementById('city').value = component.short_name;
                            }
                            else if (type == 'administrative_area_level_1') {
                                document.getElementById('state').value = component.short_name;
                            }
                            else if (type == 'country') {
                                document.getElementById('country').value = component.long_name;
                            }
                            else if (type == 'postal_code') {
                                document.getElementById('postal-code').value = component.long_name;
                            }
                        }
                    }

                    if (places.length == 0) {
                        return;
                    }

                    // Clear out the old markers.
                    markers.forEach(function (marker) {
                        marker.setMap(null);
                    });
                    markers = [];

                    // For each place, get the icon, name and location.
                    var bounds = new google.maps.LatLngBounds();
                    places.forEach(function (place) {
                        var icon = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(30, 30)
                        };

                        // Create a marker for each place.
                        markers.push(new google.maps.Marker({
                            map: map,
                            icon: icon,
                            title: place.name,
                            position: place.geometry.location
                        }));

                        if (place.geometry.viewport) {
                            // Only geocodes have viewport.
                            bounds.union(place.geometry.viewport);
                        } else {
                            bounds.extend(place.geometry.location);
                        }
                    });
                    map.fitBounds(bounds);
                });
            }

        </script>
    </div>
</div>

@section Css{
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #map {
            height: 100%;
        }

        .controls {
            margin-top: 10px;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 300px;
        }

            #pac-input:focus {
                border-color: #4d90fe;
            }

        .pac-container {
            font-family: Roboto;
        }

        #type-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
        }

            #type-selector label {
                font-family: Roboto;
                font-size: 13px;
                font-weight: 300;
            }

        #target {
            width: 345px;
        }
    </style>

    <link rel="stylesheet" href="/assets/plugins/sky-forms-pro/skyforms/css/sky-forms.css">
    <link rel="stylesheet" href="/assets/plugins/sky-forms-pro/skyforms/custom/custom-sky-forms.css">
    <!--[if lt IE 9]><link rel="stylesheet" href="/assets/plugins/sky-forms-pro/skyforms/css/sky-forms-ie8.css"><![endif]-->
}

@section Scripts{
    @*@Scripts.Render("~/bundles/jqueryval")*@

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCC_aGja_ubIScNvOHKuzIc75uPHhfeh3s&libraries=places&callback=initAutocomplete"
            async defer></script>
}